<<<<<<< HEAD
[{"/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/index.js":"1","/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/App.js":"2","/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/reportWebVitals.js":"3","/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/components/sketch.js":"4","/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/components/bed.js":"5","/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/components/room.js":"6","/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/components/calls.js":"7","/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/components/tasks.js":"8"},{"size":500,"mtime":1613589075824,"results":"9","hashOfConfig":"10"},{"size":6459,"mtime":1613765506157,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1610840262109,"results":"12","hashOfConfig":"10"},{"size":1353,"mtime":1613765506189,"results":"13","hashOfConfig":"10"},{"size":1313,"mtime":1613765506157,"results":"14","hashOfConfig":"10"},{"size":1613,"mtime":1613765506177,"results":"15","hashOfConfig":"10"},{"size":1665,"mtime":1613765506177,"results":"16","hashOfConfig":"10"},{"size":1132,"mtime":1613765506205,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12m9xo7",{"filePath":"20","messages":"21","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/index.js",[],"/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/App.js",["35","36","37","38","39","40","41","42","43","44","45"],"/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/reportWebVitals.js",[],["46","47"],"/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/components/sketch.js",[],"/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/components/bed.js",["48","49","50"],"/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/components/room.js",[],"/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/components/calls.js",[],"/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/components/tasks.js",[],{"ruleId":"51","severity":1,"message":"52","line":120,"column":31,"nodeType":"53","messageId":"54","endLine":120,"endColumn":33},{"ruleId":"55","severity":1,"message":"56","line":121,"column":19,"nodeType":"57","messageId":"58","endLine":121,"endColumn":21},{"ruleId":"51","severity":1,"message":"52","line":125,"column":23,"nodeType":"53","messageId":"54","endLine":125,"endColumn":25},{"ruleId":"55","severity":1,"message":"56","line":126,"column":22,"nodeType":"57","messageId":"58","endLine":126,"endColumn":24},{"ruleId":"51","severity":1,"message":"59","line":127,"column":28,"nodeType":"53","messageId":"60","endLine":127,"endColumn":30},{"ruleId":"55","severity":1,"message":"56","line":128,"column":24,"nodeType":"57","messageId":"58","endLine":128,"endColumn":26},{"ruleId":"55","severity":1,"message":"56","line":159,"column":23,"nodeType":"57","messageId":"58","endLine":159,"endColumn":25},{"ruleId":"51","severity":1,"message":"59","line":182,"column":24,"nodeType":"53","messageId":"60","endLine":182,"endColumn":26},{"ruleId":"55","severity":1,"message":"56","line":183,"column":21,"nodeType":"57","messageId":"58","endLine":183,"endColumn":23},{"ruleId":"55","severity":1,"message":"56","line":184,"column":26,"nodeType":"57","messageId":"58","endLine":184,"endColumn":28},{"ruleId":"61","severity":1,"message":"62","line":196,"column":16,"nodeType":"63","endLine":196,"endColumn":44},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"51","severity":1,"message":"52","line":19,"column":50,"nodeType":"53","messageId":"54","endLine":19,"endColumn":52},{"ruleId":"55","severity":1,"message":"56","line":20,"column":24,"nodeType":"57","messageId":"58","endLine":20,"endColumn":26},{"ruleId":"61","severity":1,"message":"62","line":21,"column":24,"nodeType":"63","endLine":21,"endColumn":34},"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Array.prototype.map() expects a return value from arrow function.","expectedInside","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-global-assign","no-unsafe-negation"]
=======
[{"/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/index.js":"1","/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/App.js":"2","/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/reportWebVitals.js":"3","/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/components/sketch.js":"4","/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/components/bed.js":"5","/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/components/room.js":"6","/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/components/calls.js":"7","/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/components/tasks.js":"8","/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/components/form-call.js":"9","/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/components/forms.js":"10"},{"size":500,"mtime":1613589075824,"results":"11","hashOfConfig":"12"},{"size":3360,"mtime":1613754639808,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1610840262109,"results":"14","hashOfConfig":"12"},{"size":1205,"mtime":1613755912195,"results":"15","hashOfConfig":"12"},{"size":996,"mtime":1613762623906,"results":"16","hashOfConfig":"12"},{"size":1534,"mtime":1613763718676,"results":"17","hashOfConfig":"12"},{"size":7909,"mtime":1613756631368,"results":"18","hashOfConfig":"12"},{"size":2564,"mtime":1613756715249,"results":"19","hashOfConfig":"12"},{"size":3010,"mtime":1613752863383,"results":"20","hashOfConfig":"12"},{"size":630,"mtime":1613612321993,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"12m9xo7",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/index.js",[],["44","45"],"/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/App.js",[],"/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/reportWebVitals.js",[],"/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/components/sketch.js",[],"/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/components/bed.js",[],"/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/components/room.js",[],"/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/components/calls.js",["46","47","48"],"import {useEffect, useState} from 'react';\nimport './calls.css';\n\nexport default function Calls(props){\n    const [appState, setAppState] = useState(props.appState);\n    const places = props.places;\n\n    useEffect(() => {\n        call_manager()\n    }, [])\n\n    //----------- Calls Section websocket - channel through consumer.py ------------\n    const call_manager = () => {\n        const call = new WebSocket('ws://127.0.0.1:8000/ws/callData/');\n            call.onopen = () => {\n                console.log('Calls contected');\n            };\n\n            call.onmessage = e => {\n                const msg = JSON.parse(e.data);\n                //console.log(msg);\n                if (msg.state){\n                    fNewCall(msg);\n                } else {\n                    answeredCall(msg);\n                }            \n            };\n\n            call.onerror = e => {\n                console.log(e);\n            };\n\n            call.onclose = e => {\n                console.log('Calls closed');\n                console.log(e);\n            };\n    }\n    //---------------- End Calls Section websocket ------------------------------\n\n\n// -------------------  New Call --------------------\n    const fNewCall = call => {\n        const newCall = {\n            bed:call.bed,\n            response: \"Uneventfully response\",\n            call_time: new Date().toLocaleString(),\n            response_time: new Date().toLocaleString(),\n            state: 'active'\n        }\n    handleNewCall(newCall)\n    }\n\n    const handleNewCall = newCall => {\n        const callsList = appState.calls;\n        const bedsList = appState.beds;\n        //const tasksList = appState.tasks;\n        let repeated = false,\n        activeBed = false;\n        callsList.map( call => {\n            if(call.bed === newCall.bed && call.state === 'active'){\n                repeated = true\n            }\n            return repeated\n        })  \n        bedsList.map( bed =>{\n            if (bed.bed_id === newCall.bed){\n                newCallBedState(newCall.bed)\n                activeBed = true\n            }\n            return activeBed\n        })\n        if (!repeated && activeBed){\n            callsList.push(newCall) \n            setAppState({\n                ...appState,\n                calls : callsList\n            })\n            saveNewCall(newCall)\n        }\n        else {\n            console.log('Unoccupied Bed or Repeated Call')\n        }\n    }\n      // ---- saving call ---------\n    const saveNewCall = newCall => {\n        const roomBed = newCall.bed,\n        dateNow = newCall.call_time,\n        state = newCall.state;\n        fetch('http://localhost:8000/nursing/save_call', {\n            method: 'POST',\n            headers: {\n                'Access-Control-Allow-Origin': '*',\n                'crossorigin': 'anonymous',\n                'Cache-Control': 'no-cache'\n            },\n            body: JSON.stringify({\n                roomBed,\n                dateNow,\n                state\n            })\n        })\n        .then(response =>  response.json())  \n        .then(result => {\n            const resultKey = Object.keys(result)\n            if (resultKey === 'error') {\n                window.alert(result['error']);\n            }\n        })\n        .catch(error => {\n            window.alert(`An ERROR occurred while save the New Call, ${error}`);        \n        })\n            // --- end saving call ----\n    }\n// ----------------------- end new call -------------------------------\n\n// ------------------- Answered Call ----------------------------------\n    const answeredCall = call =>{\n        const BEDS = places.numBeds;\n        let callsList = appState.calls;\n        for (let bed=1; bed<=BEDS; bed++){\n            const answCall = `${call.bed},${bed}`\n            //callsList = callsList.filter( e => e.bed !== answCall)\n            callsList.map(elem => {\n                if(elem.bed === answCall && elem.state === 'active'){\n                    elem.state = 'answered'\n                    elem.response_time = new Date()\n                    callAnsweredState(answCall)\n                    saveAnsweredCall(answCall)\n                }\n                return elem.state\n            })\n            setAppState({\n                ...appState,\n                calls : callsList\n            })\n\n            \n        }\n    }\n\n    const saveAnsweredCall = (answCall => {\n        const dateResponse = new Date();\n        fetch('http://localhost:8000/nursing/answered_call', {\n            method: \"POST\",\n            headers: {\n                'Access-Control-Allow-Origin': '*',\n                'crossorigin': 'anonymous',\n                'Cache-Control': 'no-cache'\n            },\n            body: JSON.stringify({\n                answCall,\n                dateResponse\n            })\n        })\n        .then(response =>  response.json())  \n        .then(result => {\n            const resultKey = Object.keys(result)\n            if (resultKey === 'error') {\n                window.alert(result['error']);\n            }\n        })\n        .catch(error => {\n            window.alert(`An ERROR occurred while save the Answered Call: ${error}`);        \n        })\n    })\n\n    const newCallBedState = (callId) => {\n        props.appNewCallState(callId);\n    }\n\n    const callAnsweredState= ( answCall => {\n        props.appAsweredCall(answCall);\n    })\n    // ---------------------- end answered call --------------------------\n    // ---------------------- Closed call --------------------------------\n    const closeCall = call =>{\n        const BEDS = places.numBeds;\n        let callsList = appState.calls;\n        for (let bed=1; bed<=BEDS; bed++){\n            const answCall = `${call.bed},${bed}`\n            callsList = callsList.filter( e => e.bed !== answCall)\n        }\n        setAppState({\n            ...appState,\n            calls : callsList\n        })\n    }\n// ---------------------- End Closed call --------------------------------\n\n    const callsList = appState.calls.sort(((a,b)=> {\n        if(a.state < b.state){\n            return -1\n        } else if (a.state > b.state){\n            return 1\n        }\n        return 0\n    }))\n    console.log('callsList next sort --> ', callsList)\n    return (\n        <>\n            <div className=\"row justify-content-center shdw rounded my-2\">\n                <h3>Calls</h3>\n            </div>\n            <div className=\"calls-col\">\n            {\n                callsList.map( call => {\n                    if(call.state !== 'closed'){\n                        const roomSplit = call.bed.split(',');\n                        const room = roomSplit[0];\n                        const bed = roomSplit[1];\n                        const callId = `${call.bed},${call.id}`;\n                        return (\n                            <div key={`c-${callId}`} id={'c-' + callId} className= {`card text-center call shdw rounded my-1 ${call.state}`}>\n                            <div className=\"card-hearder call-row py-1\">\n                                <h5> Room {room} </h5>\n                            </div>\n                            <div className=\"card-title call-row py-1\">\n                                \n                                <h5> {bed + ' '}\n                                    <i className=\"fas fa-bed\" aria-hidden=\"true\">\n                                    </i>\n                                </h5>\n                            </div>\n                            {call.state === 'answered' ?\n                                <div>\n                                <p id={`${callId}`} className=\"answer-call\" onClick={props.showModal}>Call Answer</p>\n                                </div>\n                                : ''\n                            }                            \n                        </div>\n                    )\n                }\n                })\n            }\n            </div>\n        </>\n    )\n}","/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/components/tasks.js",[],"/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/components/form-call.js",[],"/home/gottig/programacion/react-harvard-final/healthproject/nursing-react/src/components/forms.js",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":10,"column":8,"nodeType":"55","endLine":10,"endColumn":10,"suggestions":"56"},{"ruleId":"57","severity":1,"message":"58","line":176,"column":11,"nodeType":"59","messageId":"60","endLine":176,"endColumn":20},{"ruleId":"61","severity":1,"message":"62","line":206,"column":37,"nodeType":"63","messageId":"64","endLine":206,"endColumn":39},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'call_manager'. Either include it or remove the dependency array.","ArrayExpression",["67"],"no-unused-vars","'closeCall' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation",{"desc":"68","fix":"69"},"Update the dependencies array to be: [call_manager]",{"range":"70","text":"71"},[252,254],"[call_manager]"]
>>>>>>> hooks/modal
