{"version":3,"sources":["../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/context/appContext.js","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/services/http-queries.js","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/services/formattingDateTime.js","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/components/rooms-beds-sketch/rooms-beds/bed/bed-modal/bed-manager/BedInfo.js","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/components/tasks-list/task-modal/AlertModal.js","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/components/rooms-beds-sketch/rooms-beds/bed/bed-modal/bed-manager/EditBed.js","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/services/handlingDateTime.js","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/components/rooms-beds-sketch/rooms-beds/bed/bed-modal/bed-manager/OccupyBed.js","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/components/rooms-beds-sketch/rooms-beds/bed/bed-modal/bed-manager/VacateBed.js","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/components/tasks-list/task-modal/NewTaskModal.js","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/components/rooms-beds-sketch/rooms-beds/bed/bed-modal/BedModal.js","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/media/bed-solid.svg","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/components/rooms-beds-sketch/rooms-beds/bed/Bed.js","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/components/rooms-beds-sketch/rooms-beds/room/Room.js","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/components/rooms-beds-sketch/Sketch.js","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/media/patient.svg","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/components/calls-list/call-modal/CallModal.js","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/media/bed-solid-white.svg","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/media/call-tone.mp3","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/components/calls-list/call/Call.js","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/components/calls-list/CallsList.js","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/services/calls-socket.js","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/components/tasks-list/task-modal/EditTaskModal.js","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/components/tasks-list/task/Task.js","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/media/call-bell.mp3","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/components/tasks-list/TasksList.js","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/services/tasks-socket.js","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/HealthApp.js","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/services/app-socket.js","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/App.js","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/reportWebVitals.js","../../../../../000harvard/myrepo-ws-docker/health/nursing-react/src/index.js"],"names":["AppContext","createContext","fetchLoad","a","fetch","headers","response","json","formattingDateTime","dateTime","format","propDateTime","dateTimeData","Date","year","getFullYear","mnth","getMonth","month","addZero","dte","getDate","date","hrs","getHours","hours","mints","getMinutes","minutes","scnds","getSeconds","seconds","toLocaleString","dateTimeNoReverseHyphen","dateTimeReverseHyphen","formattingDate","exitDate","propDate","dateData","shortYear","slice","split","fullDate","formattingTime","exitTime","propTime","timeData","hMSStr","hoursStr","minutesStr","strDate","toString","length","localeDateTimeData","dateTimeFormat","reverse","join","time","BedInfo","currentBed","bedState","bed_state","occupiedTime","bed_occupied_time","planedVacate","bed_planed_vacate","className","id","bed_id","patient","diagnosis","bed_active","AlertModal","alertShow","hiddeAlertShow","alertMessage","showHideClassName","onClick","type","title","EditBed","handleShowInfo","context","useContext","setAppState","useState","occupiedDate","setOccupiedDate","setOccupiedTime","vacateDate","setVacateDate","vacateTime","setVacateTime","patientName","setPatientName","patient_security_number","patientSocial","setPatientSocial","setDiagnosis","doneBy","setDoneBy","setAlertShow","setAlertMessage","useEffect","action_done_by","openAlertShow","onSubmit","event","occupiedDateTime","timeNow","parse","preventDefault","bedId","method","body","JSON","stringify","then","result","catch","error","console","log","name","placeholder","value","onChange","target","addMinutes","setMinutes","OccupyBed","vacateDatePLus","days","addDays","setDate","roomBedId","VacateBed","hideBedModal","setBedState","vacateDT","patientId","patient_id","NewTaskModal","handleShowNewTask","room","bed","defaultProgramedTime","defaultDoneTime","programedDate","setProgramedDate","programedTime","setProgramedTime","doneDate","setDoneDate","doneTime","setDoneTime","textResponse","setTextResponse","programedBy","setProgramedBy","repeatIsChecked","setRepeatIsChecked","repeatUntilDate","setRepeatUntilDate","repeatUntilTime","setRepeatUntilTime","repeatLapse","setRepeatLapse","repeatLapseUnit","setRepeatLapseUnit","programedDT","doneDT","repeatUntil","programer","textAction","state","checked","disabled","maxlength","BedModal","show","showInfo","setShowInfo","showNewTask","setShowNewTask","showEdit","setShowEdit","showOccupy","setShowOccupy","showVacate","setShowVacate","liDisabled","liNoDisabled","class","Bed","props","appState","setShow","setCurrentBed","freeBed","image","id_bed","beds","map","e","toBedState","src","bedAvatar","alt","Room","places","roomState","setRoomState","occup","parseInt","roomIsOccupied","BEDS","numBeds","list","push","bedsListing","Sketch","ROOMS","numRooms","roomsListing","el","CallModal","hideCallModal","callEventId","call","closeCall","roomSplit","callIndex","currentCall","setCurrentCall","answeredBy","setAnsweredBy","callTime","setCallTime","callResponseTime","setCallResponseTime","call_time","response_time","noSaveCall","avatar","height","href","Call","callBedAndIndex","setCallEventId","sounder","Howl","sounds","launcher","setInterval","alertCall","clearInterval","play","stop","showCallModal","offsetParent","saveCloseCall","currentCallId","currentCallTime","callId","text","callPatient","roomBed","element","CallsList","calls","listCallsLen","setListCallsLen","audioCtx","window","AudioContext","webkitAudioContext","handleCall","WebSocket","onopen","onmessage","msg","data","onerror","onclose","callsManager","resume","suspend","answeredCall","callsList","saveCallsList","answCall","elem","saveAnsweredCall","index","EditTaskModal","hideTaskModal","task","bedIdSplit","taskBedAndIndex","taskIndex","programed_by","active","taskState","setTaskState","programed_time","done_time","taskId","maker","taskPk","reapeatTasksId","repeat_id","Task","repeat","showTaskModal","TasksList","tasksList","tasks","tList","setTList","bList","setBList","showButton","setShowButton","sound","handleTasks","tasksManager","alertTask","tasks_list","beds_list","passed","HealthApp","initialData","handleApp","appManager","App","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.44576342.chunk.js","sourcesContent":["import {createContext} from 'react';\n\nconst AppContext = createContext([{}, () => {}])\n\nexport default AppContext;","// import fetchLoad in HealthApp.js and use it in useEffect throug a function, works\n\n// currently unused for initial load, just for first load trigger and \"load ok\" message. \n// First load is through AppManager (websocket)\n\nexport const fetchLoad = async () =>{\n    const loadEndPoint = 'http://localhost:8000/nursing/initial_load'\n    const response = await fetch(loadEndPoint,\n        {\n            headers: {\n            'Access-Control-Allow-Origin': '*',\n            'crossorigin': 'anonymous',\n            'Cache-Control': 'no-cache'\n            }\n        }\n    )\n    return await response.json()\n}","export function formattingDateTime(format='d-m-y', propDateTime){\n    const dateTimeData = propDateTime || new Date();\n    let dateTime;\n    if(typeof(dateTimeData) === 'object'){\n        const year = dateTimeData.getFullYear();\n        let mnth = dateTimeData.getMonth() +1;\n        if (mnth > 12){ mnth = 1 }\n        const month = addZero(mnth);\n        const dte = dateTimeData.getDate();\n        const date = addZero(dte);\n        const hrs = dateTimeData.getHours();\n        const hours = addZero(hrs);\n        const mints = dateTimeData.getMinutes();\n        const minutes = addZero(mints);\n        const scnds = dateTimeData.getSeconds()\n        const seconds = addZero(scnds);\n        if(format === 'd-m-y'){\n            dateTime = date + '-' + month + '-' + year + ' ' + hours + ':' + minutes + ':' + seconds;\n        }\n        else if(format === 'y-m-d'){\n            dateTime = year + '-' + month + '-' + date + ' ' + hours + ':' + minutes + ':' + seconds;\n        }\n        else if(format === 'd/m/y'){\n            dateTime = date + '/' + month + '/' + year + ' ' + hours + ':' + minutes + ':' + seconds;\n        }\n        else if(format === 'y/m/d'){\n            dateTime = year + '/' + month + '/' + date + ' ' + hours + ':' + minutes + ':' + seconds;\n        }\n        else {\n            dateTime = dateTimeData.toLocaleString()\n        }\n    }\n    else if (typeof(dateTimeData) === 'string'){\n        if(format === 'y-m-d'){\n            dateTime = dateTimeNoReverseHyphen(dateTimeData)\n        } else if(format === 'd-m-y'){\n            dateTime = dateTimeReverseHyphen(dateTimeData)\n        }\n        else {\n            dateTime = dateTimeData\n        }\n    }\n    return dateTime\n}\n\nexport function formattingDate(format='d-m-y', propDate){\n    const dateData = propDate || new Date();\n    let exitDate;\n    if(typeof(dateData) === 'object'){\n        const year = dateData.getFullYear();\n        let mnth = dateData.getMonth() + 1;\n        if (mnth > 12){ mnth = 1 } \n        const month = addZero(mnth);\n        const dte = dateData.getDate();\n        const date = addZero(dte);\n        if(format === 'd-m-y'){\n            exitDate = date + '-' + month + '-' + year;\n        }\n        else if(format === 'y-m-d'){\n            exitDate = year + '-' + month + '-' + date;\n        }\n        else if(format === 'd/m/y'){\n            exitDate = date + '/' + month + '/' + year;\n        }\n        else if(format === 'y/m/d'){\n            exitDate = year + '/' + month + '/' + date;\n        }\n        else if(format === 'd-m-y:short'){\n            const shortYear = year.slice(2);\n            exitDate = date + '-' + month + '-' + shortYear;\n        }\n        else if(format === 'y-m-d:short'){\n            const shortYear = year.slice(2);\n            exitDate = shortYear + '-' + month + '-' + date;\n        }\n        else if(format === 'd/m/y:short'){\n            const shortYear = year.slice(2);\n            exitDate = date + '/' + month + '/' + shortYear;\n        }\n        else if(format === 'y/m/d:short'){\n            const shortYear = year.slice(2);\n            exitDate = shortYear + '/' + month + '/' + date;\n        }\n        else {\n            exitDate = dateData.toLocaleString().split[0]\n        }\n    }\n    if (typeof(dateData) === 'string'){\n        if(format === 'y-m-d'){\n            exitDate = dateTimeNoReverseHyphen(dateData).split(' ')[0]\n        } else if(format === 'd-m-y'){\n            exitDate = dateTimeReverseHyphen(dateData).split(' ')[0]\n        }\n        else if(format === 'y-m-d:short'){\n            const fullDate = dateTimeNoReverseHyphen(dateData).split(' ')[0]\n            exitDate = fullDate.slice(5)\n        } else if(format === 'd-m-y:short'){\n            const fullDate = dateTimeReverseHyphen(dateData).split(' ')[0]\n            exitDate = fullDate.slice(0,5)\n        }\n        else {\n            exitDate = dateData\n        }\n    }\n    return exitDate\n}\n\nexport function formattingTime(format='h:m:s', propTime){\n    const timeData = propTime || new Date();\n    let exitTime;\n    if(typeof(timeData) === 'object'){\n        const hrs = timeData.getHours();\n        const hours = addZero(hrs);\n        const mints = timeData.getMinutes();\n        const minutes = addZero(mints);\n        const scnds = timeData.getSeconds()\n        const seconds = addZero(scnds);\n        if(format === 'h:m:s'){\n            exitTime = hours + ':' + minutes + ':' + seconds;\n        }\n        else if(format === 'h:m'){\n            exitTime = hours + ':' + minutes;\n        }\n    }\n    else if (typeof(timeData) === 'string'){\n        if(format === 'h:m:s'){\n            exitTime = dateTimeNoReverseHyphen(timeData).split(' ')[1]\n        } else if(format === 'h:m'){\n            const hMSStr = dateTimeNoReverseHyphen(timeData).split(' ')[1]\n            const hoursStr = hMSStr.split(':')[0]\n            const minutesStr = hMSStr.split(':')[1]\n            exitTime = hoursStr + ':' + minutesStr;\n        }\n        else {\n            exitTime = timeData\n        }\n    }\n    return exitTime\n}\n\n\nfunction addZero(date){\n    let strDate = date.toString()\n    if(strDate.length < 2){\n        strDate = '0' + strDate\n    }\n    return strDate\n}\n\nfunction dateTimeReverseHyphen(dateTimeData){\n    // datetime.toLocaleString() format from new Date js: dd-mm-yyyy HH:MM:SS\n    // datetime.toLocaleString() format from backend: yyyy-mm-ddTHH:MM:SS.fff\n    // return dd-mm-yyyy HH:MM:SS \n\n    const localeDateTimeData = dateTimeData.toLocaleString();\n    const dateTimeFormat = () => {\n        try {\n            return {'date': localeDateTimeData.split('T')[0].split('-').reverse().join('-'), 'time': localeDateTimeData.split('T')[1].split('.')[0]};\n        } \n        catch {\n            return {'date': localeDateTimeData.split(' ')[0], 'time': localeDateTimeData.split(' ')[1]}\n        }\n    }\n    const formatedDateTime = `${dateTimeFormat().date} ${dateTimeFormat().time}`\n    return formatedDateTime\n}\n\nfunction dateTimeNoReverseHyphen(dateTimeData){\n    // datetime.toLocaleString() format from new Date js: dd-mm-yyyy HH:MM:SS\n    // datetime.toLocaleString() format from backend: yyyy-mm-ddTHH:MM:SS.fff\n    // return dd-mm-yyyy HH:MM:SS \n    \n    const localeDateTimeData = dateTimeData.toLocaleString();\n    const dateTimeFormat = () => {\n        try {\n            return {'date': localeDateTimeData.split('T')[0].split('-').join('-'), 'time': localeDateTimeData.split('T')[1].split('.')[0]};\n        } \n        catch {\n            return {'date': localeDateTimeData.split(' ')[0], 'time': localeDateTimeData.split(' ')[1]}\n        }\n    }\n    const formatedDateTime = `${dateTimeFormat().date} ${dateTimeFormat().time}`\n    return formatedDateTime\n}","import './bed-manager.css'\nimport {formattingDateTime} from '../../../../../../services/formattingDateTime'\n\nexport default function BedInfo({currentBed}){\n    const bedState = currentBed.bed_state === 'free' ? 'Free' : 'Occupied';\n    const occupiedTime = formattingDateTime('d-m-y', currentBed.bed_occupied_time)\n    const planedVacate = currentBed.bed_planed_vacate ? formattingDateTime('d-m-y', currentBed.bed_planed_vacate) : 'Undetermined'\n    \n    return (\n        <>\n            <div className=\"container\">\n                    <div className=\"row justify-content-center info-modal-title shdw\">\n                        <p id=\"info-modal-title\" className=\"text-center\">\n                            <b>Bed Information</b>\n                        </p>\n                    </div>\n                    <div className='row shdw'>\n                        <div className='col'>\n                        <p className=\"col text-center mt-3 modal-subtitle\">Room: <span className=\"p-styled1\">{currentBed.bed_id.split(',')[0]}</span></p>\n                            \n                        </div>\n                        <div className='col'>\n                        <p className=\"col text-center mt-3 modal-subtitle\">Bed: <span className=\"p-styled1\">{currentBed.bed_id.split(',')[1]}</span></p>\n                        </div>\n                    </div>\n                    <div className='row shdw'>\n                        <div className='col-md-8 col-sm-8'>\n                            <p className=\"modal-subtitle\">Patient</p>\n                            <p className='p-styled1'>\n                                {currentBed.patient}\n                            </p>\n                        </div>\n                        <div className='col-md-2 col-sm-4'>\n                            <p className=\"modal-subtitle\">State</p>\n                            <p className='p-styled1'>\n                                {bedState}\n                            </p>\n                        </div>\n                    </div>\n                    <div className='row justify-content-center shdw pb-3'>\n                        <p className=\"modal-subtitle\">Diagnosis</p>\n                        <p className='border border-info text-box'>\n                            {currentBed.diagnosis}\n                        </p>\n                    </div>\n                    <div className='row shdw pb-3'>\n                    { currentBed.bed_active &&\n                        <div className='col justify-content-center'>\n                            <p className=\"modal-subtitle\">Occupied on</p>\n                            <p className='p-styled1 text-center'>\n                                {occupiedTime}\n                            </p>\n                        </div>\n                    }\n                    { currentBed.bed_active &&\n                        <div className='col justify-content-center'>\n                            <p className=\"modal-subtitle\">Planned to Vacated on</p>\n                            <p className='p-styled1 text-center'>\n                                {planedVacate}\n                            </p>\n                        </div>\n                    }\n                    </div>\n                </div>\n            </>\n    )\n}","import './alert-modal.css'\n\nexport default function AlertModal({alertShow, hiddeAlertShow, alertMessage}) {\n    const showHideClassName = alertShow ? \"modal display-block\" : \"display-none\"\n    \n    return (\n        <>\n        <div className={showHideClassName}>\n            <section className=\"modal-alert\">\n                <div className=\"container\">\n                    <p className='alert-modal-title text-center shdw'><b>Warning!</b></p>\n                <hr />\n                    <p className='alert-modal-subtitle text-center'>\n                    {alertMessage}\n                    </p>\n                    <div className=\"d-flex justify-content-end\">\n                        <button onClick={hiddeAlertShow} type=\"button\" id=\"task-alert\" className=\"shdw btn m-1\" title=\"Close\">\n                            Close\n                        </button>\n                    </div>\n                </div>\n            </section>\n        </div>\n        </>\n    );\n}\n","import {useContext, useEffect, useState} from 'react';\nimport AppContext from '../../../../../../context/appContext'\nimport {formattingDate, formattingTime} from '../../../../../../services/formattingDateTime'\nimport './bed-manager.css'\nimport AlertModal from '../../../../../tasks-list/task-modal/AlertModal'\n\n\nexport default function EditBed({currentBed, handleShowInfo}){\n    const context = useContext(AppContext);\n    const [appState, setAppState] = context;\n    const bedState = currentBed.bed_state === 'free' ? 'Free' : 'Occupied';\n    const [occupiedDate, setOccupiedDate] = useState()\n    const [occupiedTime, setOccupiedTime] = useState()\n    const [vacateDate, setVacateDate] = useState()\n    const [vacateTime, setVacateTime] = useState()\n    const [patientName, setPatientName] = useState(currentBed.patient)\n    //const [patientCard, setPatientCard] = useState() (only in some countries)\n    const [patientSocial, setPatientSocial] = useState(currentBed.patient_security_number)\n    const [diagnosis, setDiagnosis] = useState(currentBed.diagnosis)\n    const [doneBy, setDoneBy] = useState()\n    const [alertShow, setAlertShow] = useState(false);\n    const [alertMessage, setAlertMessage] = useState('');\n    \n    useEffect(() => {\n        setOccupiedDate(formattingDate('y-m-d', currentBed.bed_occupied_time))\n        setOccupiedTime(formattingTime('h:m', currentBed.bed_occupied_time))\n        setVacateDate(currentBed.bed_planed_vacate ? formattingDate('y-m-d', currentBed.bed_planed_vacate) : '0000-00-00')\n        setVacateTime(currentBed.bed_planed_vacate ? formattingTime('h:m', currentBed.bed_planed_vacate) : '0000-00-00')\n        setDoneBy(currentBed.action_done_by)\n    }, [])\n\n    const openAlertShow = () => {\n        setAlertShow(true)\n    }\n    const hiddeAlertShow = () => {\n        setAlertShow(false)\n    }\n\n\n    const saveEditBed = event => {\n        const occupiedDateTime = occupiedDate + ' ' + occupiedTime; \n        const planedVacate = vacateDate + ' ' + vacateTime;\n        const timeNow = new Date();\n        \n        if(Date.parse(occupiedDateTime) > Date.parse(timeNow)){\n            setAlertMessage('If bed is already occupied, you cannot occupy it in the future unless you vacate it first.')\n            event.preventDefault()\n            return openAlertShow()\n        }\n        if(Date.parse(planedVacate) < Date.parse(timeNow)){\n            setAlertMessage('Past time. To vacate the bed, do it from the \"Vacate bed\" tab.')\n            event.preventDefault()\n            return openAlertShow()\n        }\n        \n        const bedId = currentBed.id;\n        fetch('http://localhost:8000/nursing/edit_bed', {\n            method: 'PUT',\n            headers: {\n                'Access-Control-Allow-Origin': '*',\n                'crossorigin': 'anonymous',\n                'Cache-Control': 'no-cache'\n            },\n            body: JSON.stringify({\n                bedId,\n                patientName,\n                patientSocial,\n                diagnosis,\n                occupiedDateTime,\n                planedVacate,\n                doneBy\n            })\n        })\n        .then(response =>  response.json())  \n        .then(result => {\n            setAppState(result) //updates the context\n        })\n        .catch(error => {\n            console.log(`An ERROR occurred while save the Edtited Bed, ${error}`);        \n        })\n        handleShowInfo()\n        event.preventDefault()\n    }\n\n\n    return (\n        <>\n        <div className=\"container\">\n            <div className=\"row justify-content-center info-modal-title shdw\">\n                <h3 id=\"info-modal-title\" className=\"text-center\">\n                    <b>Edit Bed</b>\n                </h3>\n            </div>\n            <div className='row shdw'>\n                <div className='col'>\n                <p className=\"col text-center mt-3 modal-subtitle\">Room: <span className=\"p-styled1\">{currentBed.bed_id.split(',')[0]}</span></p>\n                    \n                </div>\n                <div className='col'>\n                <p className=\"col text-center mt-3 modal-subtitle\">Bed: <span className=\"p-styled1\">{currentBed.bed_id.split(',')[1]}</span></p>\n                </div>\n            </div>\n        </div>\n            <div className='container shdw'>\n                <form id='edit-bed' onSubmit={saveEditBed}>\n                <div className='container'>\n                    <div className='row'>\n                        <div className='col-2'></div>\n                        <div className='col-8 modal-subtitle-center my-2'>Patient</div>\n                        <div className='col-2'></div>\n                    </div>\n                    <div className='row justify-content-center'>\n                        <div className='col justify-content-center'>\n                            <label className='text-box mb-0'>Name</label>\n                            <input className='input-box-center text-center' type='text' id='patient-name' name='patient-name' \n                            placeholder={patientName} value={patientName} onChange={event => setPatientName(event.target.value)}/>\n                        </div>\n                        {\n                        /* (only in some countries) \n                    <div className='row'>\n                        <div className='col justify-content-center'>\n                            <input className='input-box-center text-center' type='text' id='patient-card' name='patient-card' \n                            placeholder='Patient Card Number' value={patientCard} onChange={event => setPatientCard(event.target.value)}/>\n                        </div>\n                    </div> */\n                    }\n                        <div className='col justify-content-center'>\n                            <label className='text-box mb-0'>Social Security Number</label>\n                            <input className='input-box-center text-center' type='text' id='patient-social' name='patient-social' title='Social Security Number'\n                            placeholder={patientSocial} value={patientSocial} onChange={event => setPatientSocial(event.target.value)}/>\n                        </div>\n                    </div>\n                    <div className='row'>\n                        <div className='col-2'></div>\n                        <div className=\"col-8 modal-subtitle-center mb-2 mt-4\">Diagnosis</div>\n                        <div className='col-2'></div>\n                    </div>\n                    <div className='row justify-content-center'>\n                        <textarea id='diagnosis-info' name='diagnosis-info' className='text-box mb-3' \n                        placeholder={diagnosis} value={diagnosis} onChange={event => setDiagnosis(event.target.value)}/>\n                    </div>\n                    <div className=\"row\">                            \n                        <div id=\"occupied\" className=\"col time-box shdw mx-1\">\n                            <p className=\"text-center modal-subtitle\">Occupied On</p>\n                            <input type=\"date\" id=\"occupied-date\" name=\"occupied-date\" className= 'd-box'\n                                onChange={event => setOccupiedDate(event.target.value)} value={occupiedDate}\n                            />\n                            <input type=\"time\" id=\"occupied-time\" name=\"occupied-time\" className= 'tm-box'\n                                onChange={event => setOccupiedTime(event.target.value)} value={occupiedTime}\n                            />\n                        </div>\n                        <div id=\"vacate\" className=\"col time-box shdw mx-1\">\n                            <p className=\"text-center modal-subtitle\">Planed Vacate</p>\n                            <input type=\"date\" id=\"vacate-date\" name=\"vacate-date\" className= 'd-box'\n                                onChange={event => setVacateDate(event.target.value)} value={vacateDate}\n                            />\n                            <input type=\"time\" id=\"vacate-time\" name=\"vacate-time\" className= 'tm-box'\n                                onChange={event => setVacateTime(event.target.value)} value={vacateTime}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"row my-4 mx-0\">\n                        <div className='col-4'></div>\n                        <div className='col-8 d-flex justify-content-end'>\n                                    <label className='done-label'>Done By</label>\n                                    <input type='text' id='done-by' name='done-by' className= 'done-box'\n                                    onChange= {event => setDoneBy(event.target.value)} value={doneBy} placeholder={doneBy}/>\n                        </div>\n                    </div>\n                    <div className=\"row justify-content-end\">\n                        <input type='submit' value=\"Save\" id=\"edit-bed-send\" className=\"btn save shdw m-2 px-2 py-1 float-right\" title=\"Send\"/>\n                    </div>\n                </div>\n                </form>\n            </div>\n            { alertShow &&\n            <AlertModal\n                alertShow = {alertShow}\n                hiddeAlertShow = {hiddeAlertShow}\n                alertMessage = {alertMessage}\n            />\n        }\n        </>\n    )\n}","export function addMinutes(dateTimeData= new Date(), mints=30){\n    const addMinutes = dateTimeData.getMinutes() + mints;\n    dateTimeData.setMinutes(addMinutes)\n    const newDateTime = dateTimeData\n    return newDateTime    \n}\n\nexport function addDays(dateTimeData= new Date(), days=7){\n    const addDays = dateTimeData.getDate() + days;\n    dateTimeData.setDate(addDays)\n    const newDateTime = dateTimeData\n    return newDateTime    \n}","import {useContext, useState} from 'react';\nimport AppContext from '../../../../../../context/appContext'\nimport './bed-manager.css'\nimport {formattingDate, formattingTime} from '../../../../../../services/formattingDateTime'\nimport {addDays} from '../../../../../../services/handlingDateTime'\nimport AlertModal from '../../../../../tasks-list/task-modal/AlertModal'\n\n\nexport default function OccupyBed({currentBed, handleShowInfo}){\n    const [appState, setAppState] = useContext(AppContext);\n    const [patientName, setPatientName] = useState('')\n    //const [patientCard, setPatientCard] = useState() (only in some countries)\n    const [patientSocial, setPatientSocial] = useState('')\n    const [occupiedDate, setOccupiedDate] = useState(formattingDate('y-m-d', new Date()))\n    const [occupiedTime, setOccupiedTime] = useState(formattingTime('h:m', new Date()))\n    const vacateDatePLus = addDays(new Date() , 7)\n    const [vacateDate, setVacateDate] = useState(formattingDate('y-m-d', vacateDatePLus))\n    const [vacateTime, setVacateTime] = useState(formattingTime('h:m', vacateDatePLus))\n    const [diagnosis, setDiagnosis] = useState('')\n    const [doneBy, setDoneBy] = useState('')\n    const [alertShow, setAlertShow] = useState(false);\n    const [alertMessage, setAlertMessage] = useState('');\n\n    const openAlertShow = () => {\n        setAlertShow(true)\n    }\n    const hiddeAlertShow = () => {\n        setAlertShow(false)\n    }\n    \n    const saveOccupyBed = event => {\n        const occupiedDateTime = occupiedDate + ' ' + occupiedTime; \n        const planedVacate = vacateDate + ' ' + vacateTime;\n        const timeNow = new Date();\n        \n        if(Date.parse(planedVacate) < Date.parse(occupiedDateTime)){\n            setAlertMessage('A bed cannot be declared vacant before it is occupied.')\n            event.preventDefault()\n            return openAlertShow()\n        }\n        if(Date.parse(planedVacate) < Date.parse(timeNow)){\n            setAlertMessage('You cannot plan to vacate a bed in the past tense while trying to occupy it.')\n            event.preventDefault()\n            return openAlertShow()\n        }\n        const roomBedId = currentBed.bed_id;\n        \n        fetch('http://localhost:8000/nursing/occupy_bed', {\n            method: 'POST',\n            headers: {\n                'Access-Control-Allow-Origin': '*',\n                'crossorigin': 'anonymous',\n                'Cache-Control': 'no-cache'\n            },\n            body: JSON.stringify({\n                roomBedId,\n                patientName,\n                patientSocial,\n                diagnosis,\n                occupiedDateTime,\n                planedVacate,\n                doneBy\n            })\n        })\n        .then(response =>  response.json())  \n        .then(result => {\n            setAppState(result) //updates the context\n        })\n        .catch(error => {\n            console.log(`An ERROR occurred while save Occupy Bed, ${error}`);        \n        })\n        handleShowInfo()\n    }\n\n    return (\n        <>\n        <div className=\"container\">\n            <div className=\"row justify-content-center info-modal-title shdw\">\n                <h3 id=\"info-modal-title\" className=\"text-center text-title\">\n                    <b>Occupy Bed</b>\n                </h3>\n            </div>\n            <div className='row shdw'>\n                <div className='col'>\n                <p className=\"col text-center mt-3\">Room: <span className=\"modal-subtitle\">{currentBed.bed_id.split(',')[0]}</span></p>\n                    \n                </div>\n                <div className='col'>\n                <p className=\"col text-center mt-3\">Bed: <span className=\"modal-subtitle\">{currentBed.bed_id.split(',')[1]}</span></p>\n                </div>\n            </div>\n        </div>\n        <div className='container shdw'>\n        <form id='occupy-form' onSubmit={saveOccupyBed}>\n        <div className='container'>\n                <div className='row'>\n                    <div className='col-2'></div>\n                    <div className='col-8 modal-subtitle-center my-2'>Patient</div>\n                    <div className='col-2'></div>\n                </div>\n                <div className='row justify-content-center'>\n                    <div className='col justify-content-center'>\n                        <input className='input-box-center text-center' type='text' id='patient-name' name='patient-name' \n                        placeholder='Patient Name' value={patientName} onChange={event => setPatientName(event.target.value)}/>\n                    </div>\n                    {\n                    /* (only in some countries) \n                <div className='row'>\n                    <div className='col justify-content-center'>\n                        <input className='input-box-center text-center' type='text' id='patient-card' name='patient-card' \n                        placeholder='Patient Card Number' value={patientCard} onChange={event => setPatientCard(event.target.value)}/>\n                    </div>\n                </div> */\n                }\n                    <div className='col justify-content-center'>\n                        <input className='input-box-center text-center' type='text' id='patient-social' name='patient-social' \n                        placeholder='Social Security Number' value={patientSocial} onChange={event => setPatientSocial(event.target.value)}/>\n                    </div>\n                </div>\n            <div className='row'>\n                <div className='col-2'></div>\n                <div className=\"col-8 modal-subtitle-center mb-2 mt-4\">Diagnosis</div>\n                <div className='col-2'></div>\n            </div>\n            <div className='row justify-content-center'>\n                <textarea id='diagnosis-info' name='diagnosis-info' className='text-box mb-3' \n                placeholder='Enter Short Diagnosis' value={diagnosis} onChange={event => setDiagnosis(event.target.value)}/>\n            </div>\n        </div>\n        <div className='container'>\n            <div className='row'>\n                <div className='col-2'></div>\n                <div className='col-8 modal-subtitle-center my-2'>Bed</div>\n                <div className='col-2'></div>\n            </div>\n        <div className=\"row\">                            \n                <div id=\"occupied\" className=\"col time-box shdw\">\n                    <p className=\"text-center modal-subtitle\">Occupied On</p>\n                    <input type=\"date\" id=\"occupied-date\" name=\"occupied-date\" className= 'mb-1'\n                        onChange={event => setOccupiedDate(event.target.value)} value={occupiedDate}\n                    />\n                    <input type=\"time\" id=\"occupied-time\" name=\"occupied-time\" className= 'mb-1'\n                        onChange={event => setOccupiedTime(event.target.value)} value={occupiedTime}\n                    />\n                </div>\n                <div id=\"vacate\" className=\"col time-box shdw\">\n                    <p className=\"text-center modal-subtitle\">Planed Vacate</p>\n                    <input type=\"date\" id=\"vacate-date\" name=\"vacate-date\" className= 'mb-1'\n                        onChange={event => setVacateDate(event.target.value)} value={vacateDate}\n                    />\n                    <input type=\"time\" id=\"vacate-time\" name=\"vacate-time\" className= 'mb-1'\n                        onChange={event => setVacateTime(event.target.value)} value={vacateTime}\n                    />\n                </div>\n            </div>\n            <div className=\"row justify-content-end\">\n                <p className='justify-content-end info-label mt-3'>Done By</p> <br/>\n                <input type='text' id='done-by' name='done-by' className= 'justify-content-end my-3 mx-2'\n                onChange= {event => setDoneBy(event.target.value)} value={doneBy} placeholder='Anonymous'/>\n            </div>\n        </div>\n        <div className=\"justify-content-end\">\n            <input type='submit' value=\"Save\" id=\"edit-bed-send\" className=\"btn shdw m-2 px-2 py-1 float-right\" title=\"Send\"/>\n        </div>\n        </form>\n        </div>\n        { alertShow &&\n            <AlertModal\n                alertShow = {alertShow}\n                hiddeAlertShow = {hiddeAlertShow}\n                alertMessage = {alertMessage}\n            />\n        }\n        </>\n    )\n}","import './bed-manager.css'\nimport {formattingDateTime, formattingDate, formattingTime} from '../../../../../../services/formattingDateTime'\nimport { useState, useContext } from 'react';\nimport AppContext from '../../../../../../context/appContext';\nimport AlertModal from '../../../../../tasks-list/task-modal/AlertModal'\n\nexport default function VacateBed({currentBed, hideBedModal}){\n    const [appState, setAppState] = useContext(AppContext)\n    const [bedState, setBedState] = useState(currentBed.bed_state === 'free' ? 'Free' : 'Occupied');\n    const occupiedTime = formattingDateTime('d-m-y', currentBed.bed_occupied_time)\n    const planedVacate = currentBed.bed_planed_vacate ? formattingDateTime('d-m-y', currentBed.bed_planed_vacate) : 'Undetermined'\n    const [vacateDate, setVacateDate] = useState(formattingDate('y-m-d', new Date()))\n    const [vacateTime, setVacateTime] = useState(formattingTime('h:m', new Date()))\n    const [doneBy, setDoneBy] = useState('Anonymous')\n    const [alertShow, setAlertShow] = useState(false);\n    const [alertMessage, setAlertMessage] = useState('');\n\n    const openAlertShow = () => {\n        setAlertShow(true)\n    }\n    const hiddeAlertShow = () => {\n        setAlertShow(false)\n    }\n    \n    \n    const saveVacateBed = event => {\n        const vacateDT = vacateDate + ' ' + vacateTime;\n        const timeNow = new Date();\n        if(Date.parse(vacateDT) > Date.parse(timeNow)){\n            setAlertMessage('A bed cannot be declared vacant if it is not already vacant.')\n            event.preventDefault()\n            return openAlertShow()\n        }\n        \n        const bedId = currentBed.id;\n        const patientId = currentBed.patient_id;\n        currentBed.bed_active = false;\n        currentBed.bed_state = 'free';\n        currentBed.patient = 'No Patient';\n        currentBed.diagnosis = 'No Diagnosis';\n        setBedState('Free');\n        \n        \n        event.preventDefault()\n        \n        fetch('http://localhost:8000/nursing/vacate_bed', {\n            method: 'POST',\n            headers: {\n                'Access-Control-Allow-Origin': '*',\n                'crossorigin': 'anonymous',\n                'Cache-Control': 'no-cache'\n            },\n            body: JSON.stringify({\n                bedId,\n                patientId,\n                vacateDT,\n                doneBy\n            })\n        })\n        .then(response =>  response.json())  \n        .then(result => {\n            console.log('Vacate bed Result ', result)\n            setAppState(result) //updates the context\n        })\n        .catch(error => {\n            console.log(`An ERROR occurred while vacate Bed, ${error}`);        \n        })\n        hideBedModal()\n    }\n\n    return (\n        <>\n            <div className=\"container\">\n                    <div className=\"row justify-content-center info-modal-title shdw\">\n                        <h3 id=\"info-modal-title\" className=\"text-center text-title\">\n                            <b>Vacate Bed</b>\n                        </h3>\n                    </div>\n                    <div className='row shdw'>\n                        <div className='col'>\n                        <p className=\"col text-center mt-3 modal-subtitle\">Room: <span className=\"p-styled1\">{currentBed.bed_id.split(',')[0]}</span></p>\n                            \n                        </div>\n                        <div className='col'>\n                        <p className=\"col text-center mt-3 modal-subtitle\">Bed: <span className=\"p-styled1\">{currentBed.bed_id.split(',')[1]}</span></p>\n                        </div>\n                    </div>\n                    <div className='row shdw'>\n                        <div className='col-md-8 col-sm-8'>\n                            <p className=\"modal-subtitle\">Patient</p>\n                            <p className='p-styled1'>\n                                {currentBed.patient}\n                            </p>\n                        </div>\n                        <div className='col-md-2 col-sm-4'>\n                            <p className=\"modal-subtitle\">State</p>\n                            <p className='p-styled1'>\n                                {bedState}\n                            </p>\n                        </div>\n                    </div>\n                    <div className='row justify-content-center shdw pb-3'>\n                        <p className=\"modal-subtitle\">Diagnosis</p>\n                        <p className='border border-info text-box'>\n                            {currentBed.diagnosis}\n                        </p>\n                    </div>\n                    <div className='row shdw pb-3'>\n                    { currentBed.bed_active &&\n                        <div className='col justify-content-center'>\n                            <p className=\"modal-subtitle\">Occupied on</p>\n                            <p className='p-styled1 text-center'>\n                                {occupiedTime}\n                            </p>\n                        </div>\n                    }\n                    { currentBed.bed_active &&\n                        <div className='col justify-content-center'>\n                            <p className=\"modal-subtitle\">Planned to Vacated on</p>\n                            <p className='p-styled1 text-center'>\n                                {planedVacate}\n                            </p>\n                        </div>\n                    }\n                    </div>\n                    <form id='edit-bed' onSubmit={saveVacateBed}>\n                    <div className='container shdw'>\n                        <div id=\"vacate\" className=\"time-box\">\n                            <p className=\"text-center modal-subtitle\">Vacate On</p>\n                            <div className='row'>\n                                <div className='col-2'></div>\n                                <div className='col-8 b-center'>\n                                    <input type=\"date\" id=\"vacate-date\" name=\"vacate-date\" className= 'mb-1'\n                                        onChange={event => setVacateDate(event.target.value)} value={vacateDate}\n                                    />\n                                    <input type=\"time\" id=\"vacate-time\" name=\"vacate-time\" className= 'mb-1'\n                                        onChange={event => setVacateTime(event.target.value)} value={vacateTime}\n                                        />\n                                </div>\n                                <div className='col-2'></div>\n                            </div>\n                        </div>\n                        <div className=\"row justify-content-end\">\n                            <p className='justify-content-end info-label mt-3'>Done By</p> <br/>\n                            <input type='text' id='done-by' name='done-by' className= 'justify-content-end my-3 mx-3'\n                            onChange= {event => setDoneBy(event.target.value)} value={doneBy} placeholder={doneBy}/>\n                        </div>\n                        <div className=\"row justify-content-end\">\n                            <input type='submit' value=\"Save\" id=\"edit-bed-send\" className=\"btn save shdw m-2 px-2 py-1 float-right\" title=\"Send\"/>\n                        </div>\n                    </div>\n                </form>\n                </div>\n                { alertShow &&\n            <AlertModal\n                alertShow = {alertShow}\n                hiddeAlertShow = {hiddeAlertShow}\n                alertMessage = {alertMessage}\n            />\n        }\n            </>\n    )\n}","\nimport { useEffect, useState, useContext } from 'react';\nimport './task-modal.css';\nimport {addMinutes} from '../../../services/handlingDateTime'\nimport {formattingDate, formattingTime} from '../../../services/formattingDateTime'\nimport AppContext from '../../../context/appContext'\nimport AlertModal from './AlertModal'\n\nexport default function NewTaskModal({currentBed, handleShowNewTask, hideBedModal}) {\n    const room = currentBed.bed_id.split(',')[0];\n    const bed = currentBed.bed_id.split(',')[1];\n    const defaultProgramedTime = addMinutes(new Date(), 30);\n    const defaultDoneTime = addMinutes(new Date(), 150);\n    const [programedDate, setProgramedDate] = useState()\n    const [programedTime, setProgramedTime] = useState()\n    const [doneDate, setDoneDate] = useState()\n    const [doneTime, setDoneTime] = useState()\n    const [textResponse, setTextResponse] = useState('')\n    const [programedBy, setProgramedBy] = useState()\n    const [doneBy, setDoneBy] = useState('Anonymous')\n    const context = useContext(AppContext);\n    const [appState, setAppState] = context;\n    const [repeatIsChecked, setRepeatIsChecked] = useState(false)\n    const [repeatUntilDate, setRepeatUntilDate] = useState()\n    const [repeatUntilTime, setRepeatUntilTime] = useState()\n    const [repeatLapse, setRepeatLapse] = useState(2)\n    const [repeatLapseUnit, setRepeatLapseUnit] = useState('hours')\n    const [alertShow, setAlertShow] = useState(false);\n    const [alertMessage, setAlertMessage] = useState('');\n    \n    useEffect(() => {\n        // fill input date and input time (firefox don't work with input datetime-local)\n        \n        setProgramedDate(formattingDate('y-m-d', defaultProgramedTime))\n        setProgramedTime(formattingTime('h:m', defaultProgramedTime))\n        setDoneDate(formattingDate('y-m-d', defaultDoneTime))\n        setDoneTime(formattingTime('h:m', defaultDoneTime))\n        setRepeatUntilDate(formattingDate('y-m-d', currentBed.bed_planed_vacate))\n        setRepeatUntilTime(formattingTime('h:m', currentBed.bed_planed_vacate))\n    }, [])\n    \n    const openAlertShow = () => {\n        setAlertShow(true)\n    }\n    const hiddeAlertShow = () => {\n        setAlertShow(false)\n    }\n\n    const saveTask = (event) => {\n        const bedId = currentBed.id;\n        const programedDT = `${programedDate} ${programedTime}`;\n        const doneDT = `${doneDate} ${doneTime}`;\n        const repeatUntil = `${repeatUntilDate} ${repeatUntilTime}`\n        const programer = programedBy || 'Anonymous';\n        const textAction = textResponse || 'Routine Task';\n        let state = 'soon';\n        const timeNow = new Date();\n        if(Date.parse(programedDT) < Date.parse(timeNow)){\n            setAlertMessage('You are trying to schedule a time that has already passed')\n            event.preventDefault()\n            return openAlertShow()\n        }\n        else if(Date.parse(repeatUntil) < Date.parse(timeNow)){\n            setAlertMessage('You are trying to schedule until an hour that has already passed')\n            event.preventDefault()\n            return openAlertShow()\n        }\n        else {\n            if(Date.parse(programedDT) - Date.parse(timeNow) > 600000){\n                state = 'later'\n            }\n            fetch('http://localhost:8000/nursing/new_task', {\n                method: 'POST',\n                headers: {\n                    'Access-Control-Allow-Origin': '*',\n                    'crossorigin': 'anonymous',\n                    'Cache-Control': 'no-cache'\n                },\n                body: JSON.stringify({\n                    bedId,\n                    programedDT,\n                    doneDT,\n                    programer,\n                    textAction,\n                    state,\n                    repeatIsChecked,\n                    repeatLapseUnit,\n                    repeatUntil,\n                    repeatLapse\n                })\n            })\n            .then(response =>  response.json())  \n            .then(result => {\n                setAppState(result) //updates the context\n            })\n            .catch(error => {\n                console.log(`An ERROR occurred while save New Task, ${error}`);        \n            })\n            setTextResponse('')\n            hideBedModal()\n            event.preventDefault()\n        }\n    }\n\n    const noSaveTask = event => {\n        setTextResponse('')\n        setProgramedBy('')\n        setDoneBy('')\n        hideBedModal()\n        event.preventDefault()\n    }\n\n\n    return (\n        <>\n        <div className=\"container\">\n            <div className=\"row justify-content-center task-modal-title shdw\">\n                <h3 id=\"task-modal-title\" className=\"text-center text-title\">\n                    <b>New Task</b>\n                </h3>\n            </div>   \n            <div id=\"task-place\" className=\"row shdw\">\n                <p className=\"modal-subtitle col text-center\">Room: <b>{room}</b></p>\n                <p className=\"modal-subtitle col text-center\">Bed: <b>{bed}</b></p>\n            </div>\n            <div>\n            <p className=\"modal-subtitle col text-center\">Patient</p>\n            <p className='text-center'><b>{currentBed.patient}</b></p>\n            </div>\n        </div>\n        <div className='container shdw'>\n            <form onSubmit={saveTask} id=\"task-form\">\n                <div className=\"row\">                            \n                    <div id=\"task-programed-time\" className=\"col time-box shdw\">\n                        <p className=\"text-center modal-subtitle\">Schedule</p>\n                        <p className='task-label'>Programed By </p>\n                        <input type='text' id='programed-by' name='programed-by' className= 'tx-box ml-3 mb-1'\n                        onChange= {event => setProgramedBy(event.target.value)} value={programedBy} placeholder={'Anonymous'}/>\n                        <hr/>\n                        <input type=\"date\" id=\"programed-to\" name=\"programed-to\" className= 't-box mb-1'\n                            onChange={event => setProgramedDate(event.target.value)} value={programedDate}\n                        />\n                        <input type=\"time\" id=\"programed\" name=\"programed\" className= 't-box mb-1'\n                            onChange={event => setProgramedTime(event.target.value)} value={programedTime}\n                        />\n                    </div>\n                    <div id=\"repeat-task\" className=\"col time-box shdw\">\n                        <div className=\"text-center modal-subtitle mb-2\">\n                        <span>Repeat</span>\n                            <input type='checkbox' id='check-repeat' name='check-repeat' className= 'ml-3 mb-1'\n                            onChange= {event => setRepeatIsChecked(event.target.checked)} checked={repeatIsChecked}/>\n                        </div>\n                        <p className='task-label'>Every: </p>\n                        <input type='number' id='repeat-count' name='repeat-count' className='number-box ml-3 mb-1'\n                        onChange= {event => setRepeatLapse(event.target.value)} value={repeatLapse} placeholder={2}/>\n                        <select onChange= {event => setRepeatLapseUnit(event.target.value)} value= {repeatLapseUnit} className='select-box ml-1 mb-1'>\n                            <option value='minutes'>minutes</option>\n                            <option value='hours'>hours</option>\n                            <option value='days'>days</option>\n                        </select>\n                        <hr/>\n                        <p className='task-label'>Until </p>\n                        <input disabled={false} type=\"date\" id=\"done\" name=\"done\" className='t-box'\n                            onChange={event => setRepeatUntilDate(event.target.value)} value={repeatUntilDate}\n                        />\n                        <input disabled={false} type=\"time\" id=\"done\" name=\"done\" className= 't-box '\n                            onChange={event => setRepeatUntilTime(event.target.value)} value={repeatUntilTime}\n                        />\n                    </div>\n                </div>\n                <div className=\"justify-content-center row\"> \n                    <label className=\"modal-subtitle col text-center\"><b>Action</b>     \n                        <textarea onChange={event => setTextResponse(event.target.value)} value={textResponse} id=\"action-text\" className=\"text-box shdw\" placeholder={'Enter new task'} name=\"answer-task\" maxlength=\"1000\" />\n                    </label>\n                </div>\n                <div id=\"task-form-buttons\" className=\"row\">\n                    <div id=\"new-edit-buttons\" className=\"col\">\n                        <input type=\"submit\" value=\"Save\" id=\"task-send\" className=\"shdw save btn m-2 float-right\" title=\"Send\"/>\n                    </div>\n                </div>\n            </form>\n            <button type=\"button\" id=\"task-close\" className=\"shdw discard btn m-2 float-right\" title=\"Discard\" onClick={noSaveTask}>\n                Discard Changes\n            </button>\n        </div>\n        { alertShow &&\n            <AlertModal\n                alertShow = {alertShow}\n                hiddeAlertShow = {hiddeAlertShow}\n                alertMessage = {alertMessage}\n            />\n        }\n        </>\n    )\n}\n","import { useState } from 'react';\nimport './bed-modal.css';\nimport BedInfo from './bed-manager/BedInfo'\nimport EditBed from './bed-manager/EditBed'\nimport OccupyBed from './bed-manager/OccupyBed'\nimport VacateBed from './bed-manager/VacateBed'\nimport NewTaskModal from '../../../../tasks-list/task-modal/NewTaskModal'\n\nexport default function BedModal({show, hideBedModal, currentBed}){\n    const showHideClassName = show ? \"modal display-block\" : \"display-none\"\n    const [showInfo, setShowInfo] = useState(true)\n    const [showNewTask, setShowNewTask] = useState(false)\n    const [showEdit, setShowEdit] = useState(false)\n    const [showOccupy, setShowOccupy] = useState(false)\n    const [showVacate, setShowVacate] = useState(false)\n    const liDisabled = currentBed.bed_active ? '' : 'disabled'\n    const liNoDisabled = currentBed.bed_active ? 'disabled' : ''\n\n    \n    const handleShowNewTask = () => {\n        setShowInfo(showInfo => showInfo = false)\n        setShowEdit(showEdit => showEdit = false)\n        setShowOccupy(showOccupy => showOccupy = false)\n        setShowVacate(showVacate => showVacate = false)\n        setShowNewTask(showNewTask => showNewTask = true)\n    }\n    const handleShowInfo = () => {\n        setShowNewTask(showNewTask => showNewTask = false)\n        setShowEdit(showEdit => showEdit = false)\n        setShowOccupy(showOccupy => showOccupy = false)\n        setShowVacate(showVacate => showVacate = false)\n        setShowInfo(showInfo => showInfo = true)\n    }\n    const handleShowEdit = () => {\n        setShowNewTask(showNewTask => showNewTask = false)\n        setShowInfo(showInfo => showInfo = false)\n        setShowOccupy(showOccupy => showOccupy = false)\n        setShowVacate(showVacate => showVacate = false)\n        setShowEdit(showEdit => showEdit = true)\n    }\n    const handleShowOccupy = () => {\n        setShowNewTask(showNewTask => showNewTask = false)\n        setShowInfo(showInfo => showInfo = false)\n        setShowEdit(showEdit => showEdit = false)\n        setShowVacate(showVacate => showVacate = false)\n        setShowOccupy(showOccupy => showOccupy = true)\n    }\n    const handleShowVacate = () => {\n        setShowNewTask(showNewTask => showNewTask = false)\n        setShowInfo(showInfo => showInfo = false)\n        setShowEdit(showEdit => showEdit = false)\n        setShowOccupy(showOccupy => showOccupy = false)\n        setShowVacate(showVacate => showVacate = true)\n    }\n\n    return(\n        <>\n        <div className={showHideClassName}>\n            <section className=\"modal-bed\">\n                <div className=\"container\">                    \n                    <ul class=\"nav nav-tabs\">\n                        <li class=\"nav-item\">\n                            <p class={`nav-link ${liDisabled}`} onClick={handleShowNewTask}>\n                                <p className={`bed-modal-subtitle my-0 active-${showNewTask}`}>New Task</p>\n                            </p>\n                        </li>\n                        <li class=\"nav-item\">\n                            <p class=\"nav-link\" onClick={handleShowInfo}>\n                                <p className={`bed-modal-subtitle my-0 active-${showInfo}`}>Bed Info</p>\n                            </p>\n                        </li>\n                        <li class=\"nav-item\">\n                            <p class={`nav-link ${liNoDisabled}`} onClick={handleShowOccupy}>\n                                <p className={`bed-modal-subtitle my-0 active-${showOccupy}`}>Occupy Bed</p>\n                            </p>\n                        </li>\n                        <li class=\"nav-item\">\n                            <p class={`nav-link ${liDisabled}`} onClick={handleShowEdit}>\n                                <p className={`bed-modal-subtitle my-0 active-${showEdit}`}>Edit Bed</p>\n                            </p>\n                        </li>\n                        <li class=\"nav-item\">\n                            <p class={`nav-link ${liDisabled}`} onClick={handleShowVacate}>\n                                <p className={`bed-modal-subtitle my-0 active-${showVacate}`}>Vacate Bed</p>\n                            </p>\n                        </li>\n                    </ul>\n                    <div className='row'>\n                        { showNewTask &&\n                            <NewTaskModal\n                                currentBed = {currentBed}\n                                handleShowNewTask = {handleShowNewTask}\n                                hideBedModal = {hideBedModal}\n                            />\n                        }\n                    </div>\n                    <div className='row m-0'>\n                        { showInfo &&\n                            <BedInfo\n                                currentBed = {currentBed}\n                            />\n                        }\n                    </div>\n                    <div className='row m-0'>\n                        { showEdit &&\n                            <EditBed\n                                currentBed = {currentBed}\n                                handleShowInfo = {handleShowInfo}\n                            />\n                        }\n                    </div>\n                    <div className='row m-0'>\n                        { showOccupy &&\n                            <OccupyBed\n                                currentBed = {currentBed}\n                                handleShowInfo = {handleShowInfo}\n                            />\n                        }\n                    </div>\n                    <div className='row m-0'>\n                        { showVacate &&\n                            <VacateBed\n                                currentBed = {currentBed}\n                                hideBedModal = {hideBedModal}\n                            />\n                        }\n                    </div>\n                    <hr/>\n                    <div className='justify-content-center'>\n                        <button id=\"bed-close\" className=\"shdw btn m-discard btn-light my-2 p-2\" title=\"Close\" onClick={hideBedModal}>Close Window</button>\n                    </div>\n                </div>\n            </section>\n        </div>\n        </>\n    )\n}","export default __webpack_public_path__ + \"static/media/bed-solid.3c25ef5b.svg\";","import React, { useContext, useEffect, useState } from 'react';\nimport './bed.css';\nimport AppContext from '../../../../context/appContext'\nimport BedModal from './bed-modal/BedModal'\nimport bedAvatar from '../../../../media/bed-solid.svg'\n\n\nfunction Bed (props){\n    \n    const [appState, setAppState] = useContext(AppContext);\n        \n    const room = props.room;\n    const bed = props.bed;\n    const [show, setShow]= useState(false)\n    const [currentBed, setCurrentBed] = useState({})\n\n    const freeBed = {\n        id : '',\n        bed_id : room + ',' + bed,\n        diagnosis : 'No Diagnosis',\n        bed_state : 'free',\n        bed_active : false,\n        action_done_by : 'Anonymous',\n        image : '',\n        patient : 'No Patient'\n    }\n\n\n    const toBedState = () => {\n        const id_bed = room + ',' + bed;\n        appState.beds.map( e => {\n            if (id_bed === e.bed_id) {\n                setCurrentBed(e)\n            }\n        })\n    }\n\n    useEffect(() => {\n        setCurrentBed(freeBed)\n    }, [])\n\n    useEffect(() => {\n        toBedState()\n    }, [appState.beds])\n\n    // Show Modal ---------------------------\n    const showBedModal = () => {\n        setShow(show => show = true);\n    };\n    \n    const hideBedModal = () => {\n        setShow(show => show = false);\n    };\n    \n    return (       \n        <>     \n            <div className={`card shdw rounded bed ${currentBed.bed_state}`} id= {'b-' + room + ',' + bed} \n                onClick={showBedModal} title={currentBed.patient}>\n                <div className=\"bed-title text-center px-2\">\n                    {bed + ' '}\n                </div>\n                <h5 className=\"text-center px-2\"> \n                    <img src={bedAvatar} alt=\"Bed\" className='bed-avatar'></img>\n                </h5> \n            </div>\n            { show &&\n                <BedModal\n                show = {show}\n                hideBedModal = {hideBedModal}\n                currentBed = {currentBed}\n                />\n            }\n        </>\n    )\n}\n\nexport default Bed;","import { useContext, useState, useEffect } from \"react\";\nimport Bed from \"../bed/Bed\";\nimport './room.css'\nimport AppContext from '../../../../context/appContext'\n\nconst Room = (props) => {\n    const [appState, setAppState] = useContext(AppContext);\n    \n    const room = props.room;\n    const places = props.places;\n    const [roomState, setRoomState] = useState('room-free')\n    \n    const bedsListing = () => {\n        const BEDS = places.numBeds;\n        let list = [];\n        for (let bed = 1; bed <= BEDS; bed++) {\n            list.push(bed);\n        }\n        return list;\n    }\n    \n    const roomIsOccupied = () => {\n        let occup = false;\n        appState.beds.map(bed => {\n            const roomOfBed = parseInt(bed.bed_id.split(',')[0])\n            if (roomOfBed === room){\n                setRoomState('room-occupied')\n                occup = true\n            }\n        })\n        if (!occup) {setRoomState('room-free')}\n    }\n\n    useEffect(() => {\n        roomIsOccupied()\n    }, [appState.beds])\n\n    return (\n        <>\n            <div id= {'r-' + room} className=\"col-2 rounded m-1 shdw\">\n                <div className={`row justify-content-center shdw rounded ${roomState}`}>\n                    <p className='text-center room-title'> Room <b>{room}</b> </p>\n                </div>\n                <div className=\"row justify-content-center\">\n                {bedsListing().map( bed => {\n                    return (                    \n                            <Bed\n                                key = {`b-${room},${bed}`}\n                                appState = {appState}\n                                room = {room}\n                                bed= {bed}\n                                />                        \n                        )\n                    }\n                )}\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default Room;","import Room from \"./rooms-beds/room/Room\";\nimport './sketch.css'\nimport AppContext from '../../context/appContext'\nimport { useContext } from \"react\";\n\nexport default function Sketch(props){    \n    const [appState, setAppState] = useContext(AppContext);\n    \n    const places = props.places;\n    \n    const roomsListing = () => {\n        const ROOMS = places.numRooms;\n        let list = [];\n        for (let room = 1; room <= ROOMS; room++) {\n            list.push(room);\n        }\n        return list;\n    }\n\n    return (\n        <>\n            <div className=\"sketch row justify-content-center shdw rounded m-1\">\n                <p className=\"text-center sketch-title\">Rooms Sketch</p>\n            </div>                \n            <div className=\"row justify-content-center\">\n                {roomsListing().map( el => {\n                    return (                            \n                            <Room \n                                key = {`r-${el}`} \n                                room= {el}\n                                appState={appState} \n                                places={places}\n                            />                            \n                        )\n                    }\n                )}            \n            </div>\n        </>\n    )\n}","export default __webpack_public_path__ + \"static/media/patient.5f20d140.svg\";","\nimport { useEffect, useState } from 'react';\nimport './call-modal.css';\nimport {formattingDateTime} from '../../../services/formattingDateTime';\nimport avatar from '../../../media/patient.svg'\n\nfunction CallModal({ hideCallModal, show, callEventId, call, closeCall }) {\n  const showHideClassName = show ? \"modal display-block\" : \"display-none\";\n  const callEventIdSplit = callEventId.split('-')[1];\n  const roomSplit = callEventIdSplit.split(','); \n  const room = roomSplit[0];\n  const bed = roomSplit[1];\n  const callIndex = roomSplit[2];\n  const [currentCall, setCurrentCall] = useState()\n  const [textResponse, setTextResponse] = useState('')\n  const [answeredBy, setAnsweredBy] = useState()\n  const [callTime, setCallTime] = useState(new Date())\n  const [callResponseTime, setCallResponseTime] = useState(new Date())\n\n  useEffect(() => {\n    setCurrentCall(call);\n    // datetime.toLocaleString() format from new Date js -> dd-mm-yyyy HH:MM:SS\n    // datetime.toLocaleString() format from backend -> yyyy-mm-ddTHH:MM:SS.fff \n    setCallTime(formattingDateTime('d-m-y', call.call_time))\n    setCallResponseTime(formattingDateTime('d-m-y', call.response_time))\n  }, [call])\n\n  const saveCall = (event) => {\n    closeCall(currentCall.id, currentCall.response_time, textResponse, answeredBy)\n    setTextResponse('')\n    setAnsweredBy('')\n    event.preventDefault()\n  }\n\n  const noSaveCall = event => {\n    setTextResponse('')\n    setAnsweredBy('')\n    hideCallModal()\n    event.preventDefault()\n  }\n  \n  return (\n    <>\n    { currentCall &&\n      <div className={showHideClassName}>\n        <section className=\"modal-call\">\n          <div className=\"container\">\n            { currentCall.state === 'answered' ?\n            <>\n              <div className=\"row justify-content-center call-modal-title\">\n                <h3 id=\"call-modal-title\" className=\"text-center text-title\">\n                  <b>Call Answer</b>\n                </h3>\n              </div>   \n              <div id=\"place\" className=\"row shdw\">\n                    <p className=\"modal-subtitle col text-center\">List Position: <b>{parseInt(callIndex) + 1}</b></p>\n                    <p className=\"modal-subtitle col text-center\">Room: <b>{room}</b></p>\n                    <p className=\"modal-subtitle col text-center\">Bed: <b>{bed}</b></p>\n              </div>\n                <form onSubmit={saveCall} id=\"call-form\" className=\"form-container\">\n                  <div className=\"row\">                            \n                      <div id=\"call-time\" className=\"col time-box shdw\">\n                        <p className=\"text-center modal-subtitle\">Call</p>\n                        <p className=\"text-center\"><b>{callTime}</b></p>\n                        <p className=\"text-center\"><b>{call.patient}</b></p>\n                      </div>\n                      <div id=\"call-answer\" className=\"col time-box shdw\">\n                        <p className=\"text-center modal-subtitle\">Answer</p>\n                        <p className=\"text-center\"><b>{callResponseTime}</b></p>\n                        <p className=\"justify-content-center row\">\n                          <input type='text' id='answered-by' name='answered-by' className= 'shdw mb-1'\n                            onChange= {event => setAnsweredBy(event.target.value)} value={answeredBy} placeholder='Answered by'/>\n                        </p>\n                      </div>\n                  </div>\n              <div className=\"justify-content-center row\">\n                <label className=\"modal-subtitle col text-center mt-1\"><b>Response</b>     \n                  <textarea onChange={event => setTextResponse(event.target.value)} value={textResponse} id=\"answer-text\" className=\"text-box shdw\" placeholder=\"Uneventfully response (deafult)\" name=\"answer-call\" maxlength=\"1000\" />\n                </label>\n              </div>\n              <div id=\"new-form-buttons\" className=\"row\">\n                <div id=\"new-edit-buttons\" className=\"col\">\n                <input type=\"submit\" value=\"Save and Colse\" id=\"answer-call-send\" className=\"shdw save btn m-2 float-right\" title=\"Send\"/>\n                </div>\n              </div>\n            </form>\n                  <button type=\"button\" id=\"answer-close\" className=\"shdw discard btn m-2 float-right\" title=\"Discard\" onClick={noSaveCall}>\n                    Discard Changes\n                  </button>\n            </>\n            :\n            <>\n            <div className=\"row justify-content-center call-modal-title\">\n                <h3 id=\"call-modal-title\" className=\"text-center text-title\">\n                  <b>Call</b>\n                </h3>\n              </div>   \n              <div id=\"place\" className=\"row shdw\">\n                    <p className=\"modal-subtitle col text-center\">List Position: <b>{parseInt(callIndex) + 1}</b></p>\n                    <p className=\"modal-subtitle col text-center\">Room: <b>{room}</b></p>\n                    <p className=\"modal-subtitle col text-center\">Bed: <b>{bed}</b></p>\n              </div>\n              <div className=\"row\">                            \n                      <div id=\"call-time\" className=\"col time-box shdw\">\n                        <p className=\"text-center modal-subtitle\">Call</p>\n                        <p className=\"text-center\"><b>{callTime}</b></p>\n                      </div>\n                      <div id=\"call-answer\" className=\"col shdw\">\n                        <img src={avatar} alt={\"Avatar\"} height={'50'} className={'avatar'}></img>\n                        <div>\n                          <a href=\"https://www.flaticon.es/\"> </a>\n                        </div>\n                      <p className=\"text-center\"><b>{call.patient}</b></p>\n                      </div>\n                  </div>\n                  <button type=\"button\" id=\"answer-close\" className=\"shdw discard btn m-2 float-right\" title=\"Close\" onClick={noSaveCall}>\n                    Close\n                  </button>\n            </>\n            }\n          </div>\n        </section>\n      </div>\n    }\n    </>\n  );\n}\n\nexport default CallModal;\n\n","export default __webpack_public_path__ + \"static/media/bed-solid-white.5facbb7b.svg\";","export default __webpack_public_path__ + \"static/media/call-tone.d7aa675a.mp3\";","import './call.css'\nimport CallModal from '../call-modal/CallModal'\nimport {useState, useContext, useEffect} from 'react'\nimport AppContext from '../../../context/appContext'\nimport bedAvatar from '../../../media/bed-solid-white.svg'\nimport sounds from '../../../media/call-tone.mp3';\nimport {Howl} from 'howler';\n\n\nexport default function Call({ call, callBedAndIndex}){\n    const roomSplit = call.bed.split(',');\n    const room = roomSplit[0];\n    const bed = roomSplit[1];\n    const [appState, setAppState] = useContext(AppContext); // looks like hook?\n    const [show, setShow]= useState(false)\n    const [callEventId, setCallEventId] = useState('');\n\n    // Setup the new Howl.\n    const sounder = new Howl({\n        src: [sounds]\n    });\n\n\n    useEffect(() => {\n        const launcher = setInterval( () => {\n            alertCall(launcher)\n        }, 15000);\n        return(() => {\n            clearInterval(launcher)\n        })\n    }, [call.state])\n\n    const alertCall = (launcher) => {\n        if(call.state === 'active'){\n            sounder.play()\n        } else {\n            sounder.stop()\n            clearInterval(launcher)\n        }\n    }\n\n    // To display in title\n    const patient = () => {\n        let callPatient = '';\n        const roomBed = call.bed\n        const bedsList = appState.beds\n        bedsList.map(element => {\n            if(element.bed_id === roomBed){\n                callPatient =  element.patient\n            }\n            return callPatient\n        })\n        return callPatient\n    }\n    \n    // Show Modal ---------------------------\n    const showCallModal = (event) => {\n        setCallEventId(callEventId => callEventId = event.target.id ? event.target.id : event.target.offsetParent.id);\n        setShow(show => show = true );\n    };\n    \n    const hideCallModal = () => {\n        setShow(show => show = false );\n    };\n    \n    // ---------------------- Closed call --------------------------------    \n    const closeCall = (currentCallId, currentCallTime, textResponse, answeredBy) => {\n        hideCallModal();\n        saveCloseCall(currentCallId, currentCallTime, textResponse, answeredBy)\n        }\n\n    const saveCloseCall = async (currentCallId, currentCallTime, textResponse, answeredBy='Anonymous') => {\n        const callId = currentCallId\n        const callTime = currentCallTime;\n        const text = textResponse === '' ? 'Uneventfully response' : textResponse;\n        await fetch('http://localhost:8000/nursing/close_call', {\n            method: \"POST\",\n            headers: {\n                'Access-Control-Allow-Origin': '*',\n                'crossorigin': 'anonymous',\n                'Cache-Control': 'no-cache'\n            },\n            body: JSON.stringify({\n                callId,\n                callTime,\n                text,\n                answeredBy\n            })\n        })\n        .then(response =>  response.json())  \n        .then(result => {\n            setAppState(result) //updates the context\n        })\n        .catch(error => {\n            console.log(`An ERROR occurred while save the Closed Call: ${error}`);        \n        })\n    }    \n// ---------------------- End Closed call --------------------------------\n\n    return (\n        <>                        \n            <div id={'c-' + callBedAndIndex} onClick={showCallModal} title={patient()}\n            className= {`animate__animated animate__fadeInUp card text-center call shdw rounded my-1 ${call.state}`}>\n                <div className=\"card-hearder call-row py-1\" onClick={showCallModal}>\n                    <p className='call-bed'> Room <b>{room}</b> </p>\n                </div>\n                <div className=\"card-title call-row py-1\" onClick={showCallModal}>\n                    \n                    <p className='call-bed'> <b>{bed + ' '}</b>\n                        <img id={`call-bed-avatar-${bed}`} src={bedAvatar} alt='Bed Avatar' className='call-bed-avatar' onClick={showCallModal}>\n                        </img>\n                    </p>\n                </div>             \n            </div>\n            <div>\n                { show &&\n                    <CallModal \n                        key = {'CM-3'}\n                        show={show} \n                        hideCallModal={hideCallModal}\n                        callEventId={callEventId}\n                        call= {call}\n                        closeCall= {closeCall} \n                    />\n                }\n            </div>\n        </>\n    )    \n}","import {useContext, useEffect, useState} from 'react';\nimport './calls-list.css';\nimport Call from './call/Call';\nimport {callsManager} from '../../services/calls-socket';\nimport AppContext from '../../context/appContext';\nimport sounds from '../../media/call-tone.mp3';\nimport {Howl} from 'howler';\n\n\n\n\nexport default function CallsList(props){\n    const [appState, setAppState] = useContext(AppContext); // looks like hook?\n    const [listCallsLen, setListCallsLen] = useState(appState.calls.length);\n    const places = props.places;\n    let AudioContext = window.AudioContext || window.webkitAudioContext;\n    let audioCtx = new AudioContext();\n\n\n    // Setup the new Howl.\n    const sounder = new Howl({\n        src: [sounds]\n    });\n        \n    useEffect(() => {\n        callsManager({handleCall})\n        if (audioCtx.state === 'suspended') {\n            audioCtx.resume();\n        }\n        return(() => {\n            audioCtx.suspend()\n        })\n    }, [])\n\n    useEffect(() => {\n        setListCallsLen(appState.calls.length)\n    }, [appState.calls.length])\n\n    const handleCall = msg => {\n        if (msg.state){\n            if(msg.call){\n                setAppState(msg.call)\n                setListCallsLen(msg.call.calls.length)\n                sounder.play() // First alert. Next handled by component \"Call\"\n            } else {\n                console.log('Repeated Call or Unoccupied Bed')\n            }\n        } else {\n            setAppState(msg.call)\n            setListCallsLen(msg.call.calls.length)\n            answeredCall(msg);\n        }\n    }\n\n// ------------------- Answered Call ----------------------------------\n    const answeredCall = call =>{\n        const callsList = call.call.calls\n        const BEDS = places.numBeds;\n        let saveCallsList = [];\n        if (callsList.length > 0){\n            for (let bed=1; bed<=BEDS; bed++){\n                let answCall = `${call.bed},${bed}`\n                callsList.map(elem => {\n                    if(elem.bed === answCall && elem.state === 'active'){\n                        elem.state = 'answered'\n                        elem.response_time = new Date()\n                        saveCallsList.push(elem)\n                    }\n                })\n            }\n            saveAnsweredCall(saveCallsList)\n            }\n        else {\n            console.log('No calls to answered')\n        }\n    }\n\n    const saveAnsweredCall = async (saveCallsList) => {\n        if (saveCallsList.length > 0) {            \n            await fetch('http://localhost:8000/nursing/answered_call', {\n                method: 'POST',\n                headers: {\n                    'Access-Control-Allow-Origin': '*',\n                    'crossorigin': 'anonymous',\n                    'Cache-Control': 'no-cache'\n                },\n                body: JSON.stringify({\n                    saveCallsList\n                })\n            })\n            .then(response =>  response.json())  \n            .then(result => {\n                setAppState(result) //updates the context\n            })\n            .catch(error => {\n                console.log(`An ERROR occurred while save the Answered Call: ${error}`);        \n            })\n        }\n    }\n    // ---------------------- end answered call --------------------------\n\n    return (\n        <>\n            <div className=\"call-title row justify-content-center shdw rounded my-2\">\n                <p className=\"call-title-text\">Calls</p>\n            </div>\n            <div className=\"calls-col\">\n            { \n            listCallsLen > 0 &&\n                appState.calls.map( (call, index) =>  {\n                    return (\n                    <Call \n                        key = {`${call.bed},${index}`}\n                        call = {call}\n                        callBedAndIndex = {`${call.bed},${index}`} \n                    />\n                    )\n                })\n            }\n            </div>\n        </>\n    )\n}","    //----------- Calls Section websocket - channel through consumer.py ------------\n    export const callsManager = ({handleCall}) => {\n        const call = new WebSocket('ws://127.0.0.1:8000/ws/callData/');\n            call.onopen = () => {\n                console.log('Calls contected');\n            };\n\n            call.onmessage = e => {\n                const msg = JSON.parse(e.data);\n                handleCall(msg)            \n            };\n\n            call.onerror = e => {\n                console.log(e);\n            };\n\n            call.onclose = e => {\n                console.log('Calls closed');\n                console.log(e);\n            };\n    }\n    //---------------- End Calls Section websocket ------------------------------\n\n","\nimport { useEffect, useState, useContext } from 'react';\nimport './task-modal.css';\nimport {formattingDate, formattingTime} from '../../../services/formattingDateTime';\nimport AppContext from '../../../context/appContext'\n\nfunction EditTaskModal({ hideTaskModal, show, task, taskBedAndIndex}) {\n    const showHideClassName = show ? \"modal display-block\" : \"display-none\";\n    const bedIdSplit = taskBedAndIndex.split(','); \n    const room = bedIdSplit[0];\n    const bed = bedIdSplit[1];\n    const taskIndex = bedIdSplit[2];\n    const [textResponse, setTextResponse] = useState(task.task)\n    const [programedDate, setProgramedDate] = useState()\n    const [programedTime, setProgramedTime] = useState()\n    const [doneDate, setDoneDate] = useState()\n    const [doneTime, setDoneTime] = useState()\n    const [programedBy, setProgramedBy] = useState(task.programed_by)\n    const [doneBy, setDoneBy] = useState(task.action_done_by)\n    const [taskState, setTaskState] = useState(task.active)\n    const context = useContext(AppContext);\n    const [appState, setAppState] = context;\n    const [repeatIsChecked, setRepeatIsChecked] = useState(false)\n    \n    useEffect(() => {\n        // fill input date and input time (firefox don't work with input datetime-local)\n        \n        setProgramedDate(formattingDate('y-m-d', task.programed_time))\n        setProgramedTime(formattingTime('h:m', task.programed_time))\n        setDoneDate(formattingDate('y-m-d', task.done_time))\n        setDoneTime(formattingTime('h:m', task.done_time))\n        setTextResponse(textResponse => textResponse = task.task)\n    }, [])\n\n    \n    const saveTask = (event) => {\n        const programedDT = `${programedDate} ${programedTime}`\n        const doneDT = `${doneDate} ${doneTime}`\n        const taskId = task.id;\n        const programer = programedBy;\n        const maker = doneBy;\n        let textAction = textResponse;\n        const timeNow = new Date();\n        const currentBed = room + ',' + bed;\n        let active = taskState;\n        let state = 'soon';\n        if(Date.parse(doneDT) < Date.parse(timeNow)){\n            textAction = `${textResponse}(Done)`\n            active = false\n        }\n        if(Date.parse(programedDT) - Date.parse(timeNow) > 600000){\n            state = 'later'\n        } \n        else if(Date.parse(programedDT) - Date.parse(timeNow) > 0 && Date.parse(programedDT) - Date.parse(timeNow) < 1800000){\n            state = 'soon'\n        } else if (Date.parse(programedDT) - Date.parse(timeNow) < 0) {\n            state = 'passed'\n        }\n        fetch('http://localhost:8000/nursing/edit_task', {\n            method: 'PUT',\n            headers: {\n                'Access-Control-Allow-Origin': '*',\n                'crossorigin': 'anonymous',\n                'Cache-Control': 'no-cache'\n            },\n            body: JSON.stringify({\n                taskId,\n                currentBed,\n                programedDT,\n                doneDT,\n                programer,\n                maker,\n                textAction,\n                state,\n                active\n            })\n        })\n        .then(response =>  response.json())  \n        .then(result => {\n            setAppState(result) //updates the context\n        })\n        .catch(error => {\n            console.log(`An ERROR occurred while save the Edtited Task, ${error}`);        \n        })\n        setTextResponse('')\n        hideTaskModal()\n        event.preventDefault()\n    }\n\n    const doneTask = () => {\n        setDoneDate(formattingDate('y-m-d', new Date()))\n        setDoneTime(formattingTime('h:m:s', new Date()))\n        setTaskState(false)\n        setTextResponse(textResponse => textResponse = `${textResponse}(Done)`)\n    } \n    \n    const deleteTask = event => {\n        const taskPk = task.id;\n        const currentBed = room + ',' + bed;\n        const reapeatTasksId = task.repeat_id\n        fetch('http://localhost:8000/nursing/delete_task', {\n            method: 'POST',\n            headers: {\n                'Access-Control-Allow-Origin': '*',\n                'crossorigin': 'anonymous',\n                'Cache-Control': 'no-cache'\n            },\n            body: JSON.stringify({\n                taskPk,\n                currentBed,\n                reapeatTasksId,\n                repeatIsChecked\n            })\n        })\n        .then(response =>  response.json())  \n        .then(result => {\n            setAppState(result) //updates the context\n        })\n        .catch(error => {\n            console.log(`An ERROR occurred while delete Task, ${error}`);        \n        })\n        hideTaskModal()\n        event.preventDefault()\n    }\n\n    const noSaveTask = event => {\n        setTextResponse('')\n        setProgramedBy('')\n        setDoneBy('')\n        hideTaskModal()\n        event.preventDefault()\n    }\n\n\n    return (\n        <>\n        <div className={showHideClassName}>\n            <section className=\"modal-task\">\n                <div className=\"container\">\n                    <div className=\"row justify-content-center task-modal-title\">\n                        <h3 id=\"task-modal-title\" className=\"text-center text-title\">\n                            <b>Edit Task</b>\n                        </h3>\n                    </div>   \n                    <form onSubmit={saveTask} id=\"task-form\" className=\"form-container\">\n                        <div id=\"task-place\" className=\"row shdw\">\n                            <p className=\"modal-subtitle col text-center\">List Position: <b>{parseInt(taskIndex) + 1}</b></p>\n                            <p className=\"modal-subtitle col text-center\">Room: <b>{room}</b></p>\n                            <p className=\"modal-subtitle col text-center\">Bed: <b>{bed}</b></p>\n                        </div>\n                        <div>\n                            <p className=\"modal-subtitle col text-center\">Patient</p>\n                            <p className='text-center'><b>{task.patient}</b></p>\n                        </div>\n                        <div className=\"row\">                            \n                            <div id=\"task-programed-time\" className=\"col time-box shdw\">\n                                <p className=\"text-center modal-subtitle\">Schedule</p>\n                                <p className='task-label'>Programed By </p>\n                                <input type='text' id='programed-by' name='programed-by' className= 'tx-box ml-3 mb-1'\n                                onChange= {event => setProgramedBy(event.target.value)} value={programedBy} placeholder={task.programed_by}/>\n                                <hr/>\n                                <input type=\"date\" id=\"programed-to\" name=\"programed-to\" className= 't-box mb-1'\n                                    onChange={event => setProgramedDate(event.target.value)} value={programedDate}\n                                />\n                                <input type=\"time\" id=\"programed\" name=\"programed\" className= 't-box mb-1'\n                                    onChange={event => setProgramedTime(event.target.value)} value={programedTime}\n                                />\n                            </div>\n                            <div id=\"task-done-time\" className=\"col time-box shdw\">\n                                <p className=\"text-center modal-subtitle\">(Will) Done at</p>\n                                <p className='task-label'>Done By</p>\n                                <input disabled={false} type='text' id='done-by' name='done-by' className= 'tx-box ml-3 mb-1'\n                                onChange= {event => setDoneBy(event.target.value)} value={doneBy} placeholder={task.action_done_by}/>\n                                <hr/>\n                                <input disabled={false} type=\"date\" id=\"done\" name=\"done\" className= 't-box mb-1'\n                                    onChange={event => setDoneDate(event.target.value)} value={doneDate}\n                                />\n                                <input disabled={false} type=\"time\" id=\"done\" name=\"done\" className= 't-box mb-1'\n                                    onChange={event => setDoneTime(event.target.value)} value={doneTime}\n                                />\n                            </div>\n                        </div>\n                        <div className=\"justify-content-center row\"> \n                            <label className=\"modal-subtitle col text-center\"><b>Action</b>     \n                                <textarea onChange={event => setTextResponse(event.target.value)} value={textResponse} id=\"action-text\" className=\"text-box shdw\" placeholder={task.task} name=\"answer-task\" maxlength=\"1000\" />\n                            </label>\n                        </div>\n                        <div id=\"task-form-buttons\" className=\"row\">\n                            <div id=\"new-edit-button\" className=\"col ml-3\">\n                                <button onClick={doneTask} id=\"task-done\" className=\"shdw done btn m-1\" title=\"Just Done\">Just Done</button>\n                                <input type=\"submit\" value=\"Save Edited\" id=\"task-send\" className=\"shdw save btn m-1\" title=\"Send\"/>\n                            </div>\n                            <div className='col border border-secondary mt-1 mb-4 mx-4'>\n                                <button onClick={deleteTask} id=\"task-delete\" className=\"shdw delete btn m-1 float-left\" title=\"Delete Task\">Delete Task</button>\n                                    <label className='align-middle mycheck-box'>\n                                    <input type='checkbox' id='check-repeat' name='check-repeat' className= ''\n                                    onChange= {event => setRepeatIsChecked(event.target.checked)} checked={repeatIsChecked}/>\n                                    <span className='task-label ml-1'> All occurrences</span>\n                                </label>\n                            </div>\n                        </div>\n                    </form>\n                    <button type=\"button\" id=\"task-close\" className=\"shdw discard btn mx-3 mb-2 float-right\" title=\"Discard\" onClick={noSaveTask}>\n                        Discard Changes\n                    </button>\n                </div>\n            </section>\n        </div>\n        </>\n    )\n}\n\nexport default EditTaskModal;\n\n","import './task.css'\nimport {useState} from 'react'\nimport EditTaskModal from '../task-modal/EditTaskModal'\nimport {formattingDate, formattingTime} from '../../../services/formattingDateTime'\nimport bedAvatar from '../../../media/bed-solid-white.svg'\n\n\nexport default function Task({task, taskBedAndIndex}){\n    const roomSplit = task.bed.split(',');\n    const room = roomSplit[0];\n    const bed = roomSplit[1];\n    const [show, setShow]= useState(false)\n    const programedDate = formattingDate('d-m-y:short', task.programed_time)\n    const programedTime = formattingTime('h:m', task.programed_time)\n    const repeat = task.repeat ? 'repeat' : 'unrepeat'\n\n\n\n\n    const showTaskModal = event => {\n        setShow(show => show = true );\n    }\n\n    const hideTaskModal = () => {\n        setShow(show => show = false );\n    };\n\n    return (\n    <>\n        <div id={'t-' + taskBedAndIndex} className= {`animate__animated animate__fadeInUp card text-center task shdw rounded my-1 ${task.state}`}\n        title={task.task} onClick={showTaskModal}>\n            <div className=\"card-hearder task-row py-1\" onClick={showTaskModal}>\n                <p className='task-card-title'> Room <b>{room}</b> </p>\n            </div>\n            <div className=\"card-title task-row py-1\" onClick={showTaskModal}>\n                \n                <p className='task-bed'> <b>{bed + ' '}</b>\n                <img id={`task-bed-avatar-${bed}`} src={bedAvatar} alt='Bed Avatar' className={`task-bed-avatar ${repeat}`} onClick={showTaskModal}>\n                </img>\n                </p>\n            </div>\n            <div className=\"card-title task-row my-0\" onClick={showTaskModal}>\n                <p> \n                    <span className='date'>{programedDate}</span> <b className={`task-hours-${task.state} ml-1`}>{programedTime}</b>\n                </p>\n            </div>\n        </div>\n        <div>\n        { show &&\n            <EditTaskModal \n            key = {1}\n            show={show}\n            task = {task} \n            hideTaskModal={hideTaskModal}\n            taskBedAndIndex={taskBedAndIndex}\n            />\n        }\n        </div>\n    </>\n    )\n}","export default __webpack_public_path__ + \"static/media/call-bell.77a04d4b.mp3\";","import Task from './task/Task'\nimport {useContext, useEffect, useState} from 'react';\nimport './tasks-list.css'\nimport {tasksManager} from '../../services/tasks-socket'\nimport AppContext from '../../context/appContext'\nimport sound from '../../media/call-bell.mp3'\nimport {Howl} from 'howler';\n\n\nfunction TasksList({places}){\n    const [appState, setAppState] = useContext(AppContext);\n    const tasksList = appState.tasks || []\n    const [tList, setTList] = useState(appState.tasks)\n    const [bList, setBList] = useState(appState.beds)\n    const [showButton, setShowButton] = useState(true)\n    \n    // Setup the new Howl.\n    const sounder = new Howl({\n        src: [sound]\n    });\n    \n    useEffect(()=> {\n    tasksManager({handleTasks}) // task websocked connect          \n    },[])\n    \n    useEffect(()=> {\n        setAppState({\n            ...appState,\n            tasks :  tList,\n            beds :  bList\n        })          \n        alertTask()\n    } ,[bList, tList])\n        \n\n    const handleTasks = msg => {\n        setTList(msg.tasks_list)\n        setBList(msg.beds_list)\n    }\n\n    const alertTask = () => {\n        setShowButton(false)\n        let passed = false;\n        tasksList.map(task => {\n            if(task.state === 'passed') {\n                passed = true\n            }\n            return passed\n        })\n        if(passed) {\n            sounder.play();\n        } \n    }\n\n    return (\n        <>\n            <div id='tasks-head' className=\"row task-title justify-content-center shdw rounded my-2\">\n                <p id='tasks-title' className='task-title-text'>Tasks</p>\n            </div>\n            {showButton &&\n                <button onClick={alertTask}>Active sound</button>\n            }\n            <div className=\"tasks-col\">\n            { tasksList.length > 0 &&\n                tasksList.map( (task, index) => {\n                    const taskBedAndIndex = `${task.bed},${index}`;\n                    return (\n                        <Task \n                        task = {task}\n                        key = {taskBedAndIndex}\n                        taskBedAndIndex = {taskBedAndIndex}\n                        places = {places}\n                        />\n                    )\n                })\n            }\n            </div>\n        </>\n    )\n}\nexport default TasksList;","    //----------- Tasks Section websocket - channel through consumer.py -----------\n    export const tasksManager = ({handleTasks}) => {\n        const call = new WebSocket('ws://127.0.0.1:8000/ws/taskData/');\n            call.onopen = () => {\n                console.log('Tasks contected');\n            };\n\n            call.onmessage = e => {\n                const msg = JSON.parse(e.data);\n                handleTasks(msg);            \n            };\n\n            call.onerror = e => {\n                console.log(e);\n            };\n\n            call.onclose = e => {\n                console.log('Tasks closed');\n                console.log(e);\n            };\n    }\n    // -------- End Tasks section websocket - channel -------------------\n","import {useEffect, useContext} from 'react';\nimport './App.css';\nimport './bootstrap.css'\nimport {fetchLoad} from './services/http-queries'\nimport Sketch from './components/rooms-beds-sketch/Sketch'\nimport CallsList from './components/calls-list/CallsList'\nimport TasksList from './components/tasks-list/TasksList'\nimport AppContext from './context/appContext'\nimport {appManager} from './services/app-socket';\n\nfunction HealthApp (){  \n  const [appState, setAppState] = useContext(AppContext);\n  const places = {\n        numBeds: 4,\n        numRooms: 30\n      }\n\n  // good practice to async fetch !!\n  const initialLoad = () =>{\n    fetchLoad()\n      .then(initialData => {\n        //setAppState(initialData)\n        console.log({initialData})\n      })\n  }\n  \n  useEffect(()=>{\n    initialLoad()\n    appManager({handleApp})\n  }, [])\n\n  const handleApp = msg => {\n    msg && setAppState(msg)\n  }\n  \n  return (\n  <>\n    {!appState ? \n      <>\n      <p className='bg-info text-white loading-text'>Loading ... </p>\n      <p className='bg-info text-white loading-text'>Please wait a moment.</p>\n      <p className='bg-secondary text-white loading-text'>If this takes too long then you can press F5</p> \n      </>\n      \n      :\n      \n        <div className=\"container justify-content-center w-100\">\n          <div className=\"row\">\n            <div className=\"col-2\">\n              <TasksList\n                  key = {'tasksComponent'}\n                  places = {places}\n              />\n            </div>\n            <div className=\"col-8\">\n              <Sketch\n                  key = {'sketchComponent'}\n                  places= {places}\n              />\n            </div>\n            <div className=\"col-2\">\n              <CallsList\n                  key = {'callsComponent'}\n                  places= {places}\n              />\n            </div>\n          </div>\n        </div>\n    \n  }\n  </>\n  )\n}\nexport default HealthApp;\n\n","    //----------- App Section websocket - channel through consumer.py -----------\n    export const appManager = ({handleApp}) => {\n        const call = new WebSocket('ws://127.0.0.1:8000/ws/appData/');\n            call.onopen = () => {\n                console.log('App contected');\n            };\n\n            call.onmessage = e => {\n                const msg = JSON.parse(e.data);\n                handleApp(msg);   \n            };\n\n            call.onerror = e => {\n                console.log(e);\n            };\n\n            call.onclose = e => {\n                console.log('App closed');\n                console.log(e);\n            };\n    }\n    // -------- End App section websocket - channel -------------------\n","import {useState} from 'react';\nimport './App.css';\nimport AppContext from './context/appContext'\nimport HealthApp from './HealthApp'\n\nfunction App (){  \n  const [appState, setAppState] = useState();\n  \n  return (\n  <AppContext.Provider value= {\n        [appState, setAppState]\n      }>\n    <HealthApp />\n  </AppContext.Provider>\n  )\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}